@page "/ticket/{Id:int}"
@using TicketManager.Services.TicketService
@using TicketManager.Data
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using System.Collections
@using System.IO
@using TicketManager.Dtos
@using TicketManager.ErrorHandlingComponents.CommentErrorHandlers
@using TicketManager.Services.CommentService

@inject ITicketService _ticketService
@inject ICommentService _commentService
@inject NavigationManager _navigationManager
@inject IModalService _modal
@inject UserManager<AppUser> _userManager

<h3>Ticket @Id</h3>
<div class="container-fluid">
    <div class="row">
        <div class="col-xl">
            <section class="vh-65">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-sm-8 text-black">
                            <div class="form-outline mb-4">
                                <label class="form-label">Name</label>
                                <text readonly class="form-control">@_ticket.Name</text>
                            </div>
                            <div class="form-outline mb-4">
                                <label class="form-label" for="form1Example1">Description</label>
                                <textarea readonly rows="@Rows" id="form1Example1" class="form-control">@_ticket.Description</textarea >
                            </div>

                            @if (_ticket.Image != null)
                            {
                                <div class="form-outline mb-4">
                                    <img src="data:image;base64,@Convert.ToBase64String(_ticket.Image)" alt="" width="150" height="200" @onclick="@(() => ShowImage(_ticket.Image))"/>
                                </div>
                            }
                            <div class="form-outline mb-4">
                                <label class="form-label">Receiver</label>
                                <text readonly class="form-control">@_ticket.ReceiverId.ToString()</text>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6 px-0 d-none d-sm-block"></div>
                </div>
            </section>
        </div>
        <div class="col-md">
            <h4>Comments</h4>
            <section style="background-color: #eee; max-height: 55vh; overflow-y: auto;">
                <div class="container my-2 py-2 ">
                    <div class="col-md-17 col-lg-15 col-xl-13">
                        @foreach (var message in GetMessages())
                        {
                            @if (_userManager.GetUserAsync(_user).Result.Id.Equals(message.AppUserId))
                            {
                                _messageState = "text-md-right";
                            }
                            <div class="card @_messageState">

                                <div class="card-body vh-50">
                                    <h6 class="fw-bold mb-1"><strong>@message.AuthorName</strong> (@message.DateCreated)</h6>

                                    <p class="mt-3 mb-4 pb-2">@message.Content</p>
                                    @if (message.Image != null)
                                    {
                                        <div class="form-outline mb-4">
                                            <img src="data:image;base64,@Convert.ToBase64String(message.Image)" alt="" width="150" height="200" @onclick="@(() => ShowImage(message.Image))"/>
                                        </div>
                                    }
                                </div>
                            </div>
                            ResetMessageState();
                        }
                    </div>
                </div>
            </section>
            <section>
                <EditForm Model="@_comment" OnValidSubmit="@HandleValidSubmit">
                    <div class="card-footer py-3 border-0" style="background-color: #f8f9fa;">
                        <div class="d-flex flex-start w-100">
                            <div class="form-outline w-100">
                                <label class="form-label">New comment</label>
                                    <InputTextArea @bind-Value="_comment.Content" class="form-control" id="textAreaExample" rows="4"></InputTextArea>
                            </div>
                        </div>
                        <div class="float-end mt-2 pt-1">
                            <button type="submit" class="btn btn-primary btn-md">Post comment</button>
                            <InputFile OnChange="@LoadFiles" type="button" class="btn btn-primary btn-sm" accept=".jpg,.jpeg,.gif"/>
                            <button @onclick="CancelComment" type="button" class="btn btn-outline-primary btn-sm">Cancel</button>
                        </div>
                    </div>
                </EditForm>
            </section>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    private const int Rows = 10;
    private Ticket _ticket;
    private Comment _comment;
    private ClaimsPrincipal _user;
    private string _messageState = "text-md-left";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _user = (await AuthStat).User;
        if (_ticketService.GetById(Id) == null)
        {
            _navigationManager.NavigateTo("/tickets", true);
        }
        _ticket = _ticketService.GetById(Id);
        _comment = new Comment();
    }

    private void HandleValidSubmit()
    { 
        try
        {
            AddNewComment();
            _comment = new Comment();
        }
        catch (Exception e)
        {
            if (string.IsNullOrEmpty(_comment.Content))
            {
                var comment = $"Please, enter a comment!";
                var parameters = new ModalParameters();
                parameters.Add(nameof(CommentErrorComponent.Message), comment);
        
                _modal.Show<CommentErrorComponent>("Error occured!", parameters);
            }
        }
    }

    private void AddNewComment()
    {
        _comment.DateCreated = DateTime.Now;
        _comment.TicketId = _ticket.Id;
        _comment.AppUserId = _userManager.GetUserAsync(_user).Result.Id;
        _commentService.Create(_comment);
    }

    private void ShowImage(IEnumerable image)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(TicketImage.Image), image);

        _modal.Show<TicketImage>("Image", parameters);
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        await using var memoryStream = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(memoryStream);
        _comment.Image = memoryStream.ToArray();
    }

    private void CancelComment()
    {
        _comment = new Comment();
    }

    private IEnumerable<CommentDto> GetMessages()
    {
        return _commentService.GetCommentsByTicketId(_ticket.Id);
    }

    private void ResetMessageState()
    {
        _messageState = string.Empty;
    }

}