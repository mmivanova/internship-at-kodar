@page "/ticket/add"
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using System.IO
@using TicketManager.Core.Services.TicketService
@using TicketManager.ErrorHandlingComponents.CommentErrorHandlers
@using TicketManager.Infrastructure.Domain.Entities

@inject ITicketService _ticketService
@inject UserManager<AppUser> _userManager
@inject NavigationManager _navigationManager
@inject IModalService _modal

<h3>Add new ticket</h3>
<br>
<section class="vh-100">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-8 text-black">

                <EditForm Model="@_ticket" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <div class="form-outline mb-4">
                        <label class="form-label">Name</label>
                        <InputText @bind-Value="_ticket.Name" class="form-control"/>
                    </div>

                    <div class="form-outline mb-4">
                        <label class="form-label" for="form1Example1">Description (optional)</label>
                        <InputTextArea rows="@Rows" @bind-Value="_ticket.Description" id="form1Example1" class="form-control"/>
                    </div>

                    <div class="form-outline mb-4">
                        <label class="form-label" for="form1Example1">Who is this ticket for</label>
                        <InputSelect @bind-Value="_ticket.ReceiverId" id="form1Example2" class="form-control">
                            <option value="TechnicalManager">Technical manager</option>
                            <option value="OfficeManager">Office manager</option>
                        </InputSelect>
                    </div>

                    <div class="form-outline mb-4">
                        <form >
                            <InputFile OnChange="@LoadFiles" class="btn btn-primary" accept=".jpg,.jpeg,.gif"/>
                            <br/>
                        </form>
                    </div>

                    <div class="mb-4">
                        <div class="form-check">
                            <Input
                                class="form-check-input"
                                type="checkbox"
                                value=""
                                id="form1Example3"
                                @onchange="eventArgs => { CheckboxClicked(eventArgs.Value); }"/>
                            <label class="form-check-label" for="form1Example3"> Private </label>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary btn-block">Create</button>
                </EditForm>

            </div>

        </div>
        <div class="col-sm-6 px-0 d-none d-sm-block"></div>
    </div>
</section>


@code {

        private const int Rows = 10;
    readonly Ticket _ticket = new();

    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    private ClaimsPrincipal _user;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _user = (await AuthStat).User;
        if (_user.Identity is {IsAuthenticated: false })
        {
            _navigationManager.NavigateTo($"/login");
        }
    }

    private void HandleValidSubmit()
    {
        _ticket.AppUserId = _userManager.GetUserAsync(_user).Result.Id;
        _ticketService.Create(_ticket);
        _navigationManager.NavigateTo($"/tickets");
    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            await using var memoryStream = new MemoryStream();
            await e.File.OpenReadStream().CopyToAsync(memoryStream);
            _ticket.Image = memoryStream.ToArray();
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception);
            if (e.File.Size >= 512000)
            {
                var errorMessage = $"This image is too big to be attached! Please, select smaller one!";
                var parameters = new ModalParameters();
                parameters.Add(nameof(CommentErrorComponent.Message), errorMessage);
        
                _modal.Show<CommentErrorComponent>("Error occured!", parameters);
            }
        }
    }

    void CheckboxClicked(object checkedValue)
    {
        if ((bool) checkedValue)
        {
            _ticket.IsPrivate = true;
        }
        else
        {
            _ticket.IsPrivate = false;
        }
    }

}